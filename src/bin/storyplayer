#!/usr/bin/env php
<?php

/**
 * storyplayer
 *         CLI tool for playing individual stories
 *
 *         Very handy for testing stories as you write them
 *
 * @author Stuart Herbert <stuart.herbert@datasift.com>
 * @copyright (c) 2012-present MediaSift Ltd.
 */

use Phix_Project\Autoloader4\PSR0_Autoloader;
use Phix_Project\Autoloader4\Autoloader_Path;

use Phix_Project\CliEngine;
use Phix_Project\CliEngine\Switches\LongHelpSwitch;
use Phix_Project\CliEngine\Switches\ShortHelpSwitch;
use Phix_Project\CliEngine\Switches\VerboseShortSwitch;
use Phix_Project\CliEngine\Switches\VerboseLongSwitch;
use Phix_Project\CliEngine\Switches\VersionSwitch;
use Phix_Project\CliEngine\Commands\HelpCommand;

use DataSift\Storyplayer\Cli\DefaultStaticConfig;
use DataSift\Storyplayer\Cli\EnvironmentsListHelper;
use DataSift\Storyplayer\Cli\InstallCommand;
use DataSift\Storyplayer\Cli\ListEnvironmentsCommand;
use DataSift\Storyplayer\Cli\ListHostsTableCommand;
use DataSift\Storyplayer\Cli\PlayStoryCommand;
use DataSift\Storyplayer\Cli\RuntimeConfigManager;
use DataSift\Storyplayer\Cli\StaticConfigManager;

// where are we, and our useful utilities?
define('APP_BINDIR', __DIR__);

// work out where the local source code might be
$localSrcDir = '';
$localSrcDirs = array(
	'phar://storyplayer/src/php',
	realpath(__DIR__ . '/../../src/php'),
	getcwd() . '/src/php',
	getcwd() . '/php'
);
foreach ($localSrcDirs as $key => $candidateDir) {
	if (!is_dir($candidateDir)) {
		unset($localSrcDirs[$key]);
	}
}

// do we have a composer autoloader?
$composerAutoloader = false;
$composerFiles = array (
	'phar://storyplayer/vendor/autoload.php',
	__DIR__ . '/../../vendor/autoload.php',
	getcwd() . '/vendor/autoload.php'
);
foreach ($composerFiles as $composerFile) {
	if (file_exists($composerFile)) {
		require_once($composerFile);
		$composerAutoloader = true;
	}
}

// do we need to explicitly load Phix's autoloader instead?
if (!$composerAutoloader) {
	// work out where the vendor folder might be
	$vendorDir = '';
	$vendorDirs = array(
		'phar://storyplayer/vendor/php',
		__DIR__ . '/../../vendor/php',
		getcwd() . '/vendor/php'
	);
	foreach ($vendorDirs as $key => $candidateDir) {
		if (is_dir($candidateDir)) {
			$vendorDir = $candidateDir;
		}
	}

	// load the autoloader file
	if (is_dir($vendorDir)) {
		require $vendorDir . '/Phix_Project/Autoloader4/PSR0/Autoloader.php';
	}
	else {
		require 'Phix_Project/Autoloader4/PSR0/Autoloader.php';
	}
}
else {
	$vendorDirs   = array();
}

// start autoloading
PSR0_Autoloader::startAutoloading();

// if we have a vendor folder, load from there
foreach ($vendorDirs as $vendorDir){
	Autoloader_Path::searchFirst(realpath($vendorDir));
}

// if we have a source dir, we also want to load from there
foreach ($localSrcDirs as $localSrcDir){
	Autoloader_Path::searchFirst($localSrcDir);
}

// load our list of helper functions
require 'DataSift/Storyplayer/functions.php';


/**
 * it all happens here, baby
 *
 * @return integer status code to return to the shell
 */
function main($argv)
{
	// ====================================================================
	//
	// BOOTSTRAP THE APP
	//
	// --------------------------------------------------------------------

	// create our initial default config
	$staticConfig = new DefaultStaticConfig();

	// load our main config
	$staticConfigManager = new StaticConfigManager();
	$staticConfigManager->loadConfig($staticConfig);

	// create our runtime config folder
	$runtimeConfigManager = new RuntimeConfigManager();
	$runtimeConfigManager->makeConfigDir();

	// get a list of the additional config files to load
	// this is a list of the available test environments!
	$envList = $staticConfigManager->getListOfAdditionalConfigFiles();

	// load the runtime config,:data that has been created by previous runs of storyplayer
	$runtimeConfig = $runtimeConfigManager->loadRuntimeConfig();

	// add into the list any environments in the default config file
	foreach ($staticConfig->environments as $envName => $dummy) {
		if ($envName !== 'defaults') {
			$envList[] = $envName;
		}
	}
	sort($envList);
	$envList = array_unique($envList);
	$envList = EnvironmentsListHelper::validateEnvironmentsList($staticConfig, $envList, $staticConfigManager);

	// put all of that into something we can give to the CliEngine
	$additionalContext = (object) array (
		'envList'			   => $envList,
		'runtimeConfig'        => $runtimeConfig,
		'runtimeConfigManager' => $runtimeConfigManager,
		'staticConfig'         => $staticConfig,
		'staticConfigManager'  => $staticConfigManager,
	);

	// ====================================================================
	//
	// PARSE THE COMMAND-LINE
	//
	// --------------------------------------------------------------------

	// create the engine
	$engine = new CliEngine();

	// set the main metadata
	$engine->setAppName('storyplayer');
	$engine->setAppVersion('1.3.0');
	$engine->setAppUrl('https://datasift.github.io/storyplayer/');
	$engine->setAppCopyright('Copyright (c) 2012-present MediaSift Ltd. All rights reserved.');
	$engine->setAppLicense('Released under the BSD 3-Clause license');

	// add the switches that come before any of the commands
	// if we have any
	//
	// add switches in the order of presidence
	$engine->addEngineSwitch(new VersionSwitch);
	$engine->addEngineSwitch(new LongHelpSwitch);
	$engine->addEngineSwitch(new ShortHelpSwitch);
	$engine->addEngineSwitch(new VerboseShortSwitch($engine->options, 0, 3));
	$engine->addEngineSwitch(new VerboseLongSwitch($engine->options, 0, 3));

	// what is our default command?
	// this is normally some sort of help command
	$engine->setDefaultCommand(new PlayStoryCommand($envList));

	// add any additional commands
	// note - we do not have to add the default command a 2nd time
	// note - if we add no additional commands, the default command is implied
	//        and the user does not have to type it on the command line
	$engine->addCommand(new HelpCommand);
	$engine->addCommand(new ListEnvironmentsCommand($envList));
	$engine->addCommand(new InstallCommand);
	$engine->addCommand(new ListHostsTableCommand);

	// all set - let's go
	return $engine->main($argv, $additionalContext);
}

return main($argv);
