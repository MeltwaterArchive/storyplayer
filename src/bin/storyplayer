#!/usr/bin/env php
<?php

/**
 * storyplayer
 *         CLI tool for playing individual stories
 *
 *         Very handy for testing stories as you write them
 *
 * @author Stuart Herbert <stuart.herbert@datasift.com>
 * @copyright (c) 2012-present MediaSift Ltd.
 */

use Phix_Project\Autoloader4\PSR0_Autoloader;
use Phix_Project\Autoloader4\Autoloader_Path;

use Phix_Project\CliEngine;
use Phix_Project\CliEngine\Switches\LongHelpSwitch;
use Phix_Project\CliEngine\Switches\ShortHelpSwitch;
use Phix_Project\CliEngine\Switches\VerboseShortSwitch;
use Phix_Project\CliEngine\Switches\VerboseLongSwitch;
use Phix_Project\CliEngine\Switches\VersionSwitch;
use Phix_Project\CliEngine\Commands\HelpCommand;

use DataSift\Storyplayer\Cli\CreateStoryCommand;
use DataSift\Storyplayer\Cli\DefaultStaticConfig;
use DataSift\Storyplayer\Cli\DeviceListHelper;
use DataSift\Storyplayer\Cli\ExtraConfigHelper;
use DataSift\Storyplayer\Cli\InstallCommand;
use DataSift\Storyplayer\Cli\KillProcessesCommand;
use DataSift\Storyplayer\Cli\ListEnvironmentsCommand;
use DataSift\Storyplayer\Cli\ListHostsTableCommand;
use DataSift\Storyplayer\Cli\ListProcessesCommand;
use DataSift\Storyplayer\Cli\PlayStoryCommand;
use DataSift\Storyplayer\Cli\RuntimeConfigManager;
use DataSift\Storyplayer\Cli\ShowDefaultEnvironmentCommand;
use DataSift\Storyplayer\Cli\ShowLocalEnvironmentCommand;
use DataSift\Storyplayer\Cli\StaticConfigManager;

use DataSift\Stone\ConfigLib\E5xx_ConfigFileNotFound;
use DataSift\Stone\ConfigLib\E5xx_InvalidConfigFile;

// where are we, and our useful utilities?
define('APP_BINDIR', __DIR__);

// enable signal handling
declare(ticks=1);

/**
 * can we safely load this file?
 *
 * WE HAVE A PROBLEM WHEN RUNNING AS A PHAR ...
 *
 *
 * however, if you:
 *
 *  1) create a git clone of Storyplayer,
 *  2) build the PHAR file, AND
 *  3) run the PHAR file from the top level of the git clone without
 *     running 'composer install|update', then the following happens:
 *
 * our PHAR contains 'vendor/autoload.php' (auto-generated by Composer)
 * on disk we have an IDENTICAL 'vendor/autoload.php' file
 *
 * Storyplayer will load them both, causing a PHP fatal error
 *
 * WE CANNOT DISABLE LOADING vendor/autoload.php FROM DISK, because
 * Storyplayer has no idea whether that is its own autoload file, or
 * the autoload file of the project we want to test
 *
 * We're therefore forced to vet the Composer autoloader file that we try
 * to load, to make sure that we have not already loaded it
 */
function can_load($filename)
{
	static $filesSeen = array();

	// checksum the file
	$sum = md5_file($filename);

	// have we seen this file before?
	if (isset($filesSeen[$sum])) {
		// do nothing - already loaded
		return false;
	}

	// if we get here, we have a new file
	$filesSeen[$sum] = $sum;

	// we can load it
	return true;
}

// work out where the local source code might be
$localSrcDir = '';
$localSrcDirs = array(
	__DIR__ . '/../php',
	__DIR__ . '/../src/php',
	getcwd() . '/src/php',
	getcwd() . '/php'
);
foreach ($localSrcDirs as $key => $candidateDir) {
	if (!is_dir($candidateDir)) {
		unset($localSrcDirs[$key]);
	}
}

// do we have a composer autoloader?
$composerAutoloader = false;
$composerFiles = array (
	__DIR__ . '/../../vendor/autoload.php',
	getcwd() . '/vendor/autoload.php'
);
foreach ($composerFiles as $composerFile) {
	if (file_exists($composerFile) && can_load($composerFile)) {
		require_once($composerFile);
		$composerAutoloader = true;
	}
}

// do we need to explicitly load Phix's autoloader instead?
if (!$composerAutoloader) {
	// work out where the vendor folder might be
	$vendorDir = '';
	$vendorDirs = array(
		__DIR__ . '/../../vendor/php',
		getcwd() . '/vendor/php'
	);
	foreach ($vendorDirs as $key => $candidateDir) {
		if (is_dir($candidateDir)) {
			$vendorDir = $candidateDir;
		}
	}

	// load the autoloader file
	if (is_dir($vendorDir)) {
		require $vendorDir . '/Phix_Project/Autoloader4/PSR0/Autoloader.php';
	}
	else {
		require 'Phix_Project/Autoloader4/PSR0/Autoloader.php';
	}
}
else {
	$vendorDirs   = array();
}

// start autoloading
PSR0_Autoloader::startAutoloading();

// if we have a vendor folder, load from there
foreach ($vendorDirs as $vendorDir){
	Autoloader_Path::searchFirst($vendorDir);
}

// if we have a source dir, we also want to load from there
foreach ($localSrcDirs as $localSrcDir){
	Autoloader_Path::searchFirst($localSrcDir);
}

// load our list of helper functions
require __DIR__.'/../php/DataSift/Storyplayer/functions.php';

/**
 * it all happens here, baby
 *
 * @return integer status code to return to the shell
 */
function main($argv)
{
	// ====================================================================
	//
	// BOOTSTRAP THE APP
	//
	// --------------------------------------------------------------------

	// create our initial default config
	$staticConfig = new DefaultStaticConfig();

	try {
		// load our main config
		$staticConfigManager = new StaticConfigManager();
		$staticConfigManager->loadConfig($staticConfig);
	}
	catch (E5xx_ConfigFileNotFound $e)
	{
		// this isn't fatal, but we need to tell the user, just in case
		echo "*** warning: storyplayer.json / storyplayer.json.dist not found\n";
	}
	catch (Exception $e)
	{
		// these are fatal ... there is a config file, but something
		// went wrong with loading it
		echo "*** fatal error: {$e->getMessage()}\n";
		exit(1);
	}

	try {
		// create our runtime config folder
		$runtimeConfigManager = new RuntimeConfigManager();
		$runtimeConfigManager->makeConfigDir();

		// get a list of the additional config files to load
		// this is a list of the available test environments,
		// or of additional devices
		$additionalConfigFiles = $staticConfigManager->getListOfAdditionalConfigFiles();

		// load the runtime config,:data that has been created by previous runs of storyplayer
		$runtimeConfig = $runtimeConfigManager->loadRuntimeConfig();
	}
	catch (Exception $e)
	{
		// all errors here are fatal
		echo "*** fatal error: {$e->getMessage()}\n";
		exit(1);
	}

	// a list of sections that can have their own config file
	$additionalConfigSections = array(
		'devices'      => array(),
		'environments' => array()
	);

	// let's see if we have any additional config to offer
	foreach ($additionalConfigSections as $sectionName => $dummy) {

		// assume that all config files have this section in them
		// (we will vet this list in a moment)
		$additionalConfigSections[$sectionName] = $additionalConfigFiles;

		// add into the list any sections in the default config file
		foreach ($staticConfig->$sectionName as $key => $dummy) {
			if ($key !== 'defaults') {
				$additionalConfigSections[$sectionName][] = $key;
			}
		}
		sort($additionalConfigSections[$sectionName]);
		$additionalConfigSections[$sectionName] = array_unique($additionalConfigSections[$sectionName]);
		$additionalConfigSections[$sectionName] = ExtraConfigHelper::validateList($staticConfig, $sectionName, $additionalConfigSections[$sectionName], $staticConfigManager);
	}

	// put all of that into something we can give to the CliEngine
	$additionalContext = (object) array (
		'deviceList'		   => $additionalConfigSections['devices'],
		'envList'			   => $additionalConfigSections['environments'],
		'runtimeConfig'        => $runtimeConfig,
		'runtimeConfigManager' => $runtimeConfigManager,
		'staticConfig'         => $staticConfig,
		'staticConfigManager'  => $staticConfigManager,
	);

	// ====================================================================
	//
	// PARSE THE COMMAND-LINE
	//
	// --------------------------------------------------------------------

	// create the engine
	$engine = new CliEngine();

	// set the main metadata
	$engine->setAppName('storyplayer');
	$engine->setAppVersion('1.5.1');
	$engine->setAppUrl('https://datasift.github.io/storyplayer/');
	$engine->setAppCopyright('Copyright (c) 2012-present MediaSift Ltd. All rights reserved.');
	$engine->setAppLicense('Released under the BSD 3-Clause license');

	// add the switches that come before any of the commands
	// if we have any
	//
	// add switches in the order of presidence
	$engine->addEngineSwitch(new VersionSwitch);
	$engine->addEngineSwitch(new LongHelpSwitch);
	$engine->addEngineSwitch(new ShortHelpSwitch);
	$engine->addEngineSwitch(new VerboseShortSwitch($engine->options, 0, 3));
	$engine->addEngineSwitch(new VerboseLongSwitch($engine->options, 0, 3));

	// what is our default command?
	// this is normally some sort of help command
	$engine->setDefaultCommand(new PlayStoryCommand($additionalContext));

	// add any additional commands
	// note - we do not have to add the default command a 2nd time
	// note - if we add no additional commands, the default command is implied
	//        and the user does not have to type it on the command line
	$engine->addCommand(new HelpCommand);
	$engine->addCommand(new CreateStoryCommand);
	$engine->addCommand(new ListEnvironmentsCommand($additionalConfigSections['environments']));
	$engine->addCommand(new InstallCommand);
	$engine->addCommand(new KillProcessesCommand);
	$engine->addCommand(new ListHostsTableCommand);
	$engine->addCommand(new ListProcessesCommand);
	$engine->addCommand(new ShowDefaultEnvironmentCommand($additionalContext));
	$engine->addCommand(new ShowLocalEnvironmentCommand($additionalContext));

	// all set - let's go
	try {
		return $engine->main($argv, $additionalContext);
	}
	catch (Exception $e)
	{
		echo "*** fatal error: " . $e->getMessage() . "\n\n";

		if (get_class($e) !== 'Exception') {
			echo "Stack trace is:\n" . $e->getTraceAsString() . "\n";
		}
	}
}

return main($argv);
