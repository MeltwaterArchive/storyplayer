#!/usr/bin/env php
<?php

/**
 * storyplayer
 *         CLI tool for playing individual stories
 *
 *         Very handy for testing stories as you write them
 *
 * @author Stuart Herbert <stuart.herbert@datasift.com>
 * @copyright (c) 2012-present MediaSift Ltd.
 */

use Phix_Project\Autoloader4\PSR0_Autoloader;
use Phix_Project\Autoloader4\Autoloader_Path;

use DataSift\Stone\ConfigLib\ConfigLoader;
use DataSift\Stone\LogLib\Log;
use DataSift\Stone\ObjectLib\JsonObject;
use DataSift\Storyplayer\PlayerLib\RuntimeConfigManager;
use DataSift\Storyplayer\PlayerLib\StoryConfigLoader;
use DataSift\Storyplayer\PlayerLib\StoryPlayer;
use DataSift\Storyplayer\PlayerLib\StoryTeller;
use DataSift\Storyplayer\StoryLib\StoryLoader;
use DataSift\Storyplayer\UserLib\User;
use DataSift\Storyplayer\UserLib\GenericUserGenerator;
use DataSift\Storyplayer\UserLib\ConfigUserLoader;

// where are we?
define('BIN_DIR', __DIR__);

// work out where the vendor folder might be
$vendorDir = __DIR__ . '/../../vendor/php';

// load the autoloader file
if (is_dir($vendorDir)) {
	require $vendorDir . '/Phix_Project/Autoloader4/PSR0/Autoloader.php';
}
else {
	require 'Phix_Project/Autoloader4/PSR0/Autoloader4';
}

// start autoloading
PSR0_Autoloader::startAutoloading();

// tell the autoloader where to find our source code
if (is_dir($vendorDir)) {
	Autoloader_Path::searchFirst(realpath($vendorDir));
}
if (is_dir(__DIR__ . '/../php/')) {
	Autoloader_Path::searchFirst(__DIR__ . '/../php/');
}

// load our list of helper functions
require 'DataSift/Storyplayer/functions.php';

/**
 * it all happens here, baby
 *
 * @return integer status code to return to the shell
 */
function main($argv)
{

	// make sure we have enough arguments
	if (!isset($argv[2])) {
		echo "*** error: insufficient parameters\n";
		echo "*** usage: " . $argv[0] . " <environment> <story>\n";
		exit(1);
	}

	// What's our current hostname?
	$hostname = trim(`hostname`);

	// create our runtime config folder
	$runtimeConfigManager = new RuntimeConfigManager();
	$runtimeConfigManager->makeConfigDir();

	// load our default config
	$configLoader = new StoryConfigLoader();
	$staticConfig = $configLoader->loadDefaultConfig();

	// load any per-user overrides
	$configLoader->loadUserConfig($staticConfig);

	// load our environment-specific config
	//
	// this will be merged in with the default config
	$configLoader->loadAdditionalConfig($staticConfig, $argv[1]);

	// finally, load the runtime config, data that has been created
	// by previous runs of storyplayer
	$runtimeConfig = $configLoader->loadRuntimeConfig();

	// setup logging
	Log::init("storyplayer", $staticConfig->logger);

	// pick our environment
	$environment = $argv[1];

	// @TODO validate environment

	// create our user generator
	$userGenerator = new GenericUserGenerator();

	// create our user loader
	// it will use our user generator if no cached user is found
	$userLoader = new ConfigUserLoader($userGenerator);

	// load our story
	$story = StoryLoader::loadStory($argv[2]);

	// create something to play this story
    $player = new StoryPlayer();
    $teller = new StoryTeller($story);

    // create the supporting context for this story
    $context = $player->createContext($staticConfig, $runtimeConfig, $environment, $story, $userLoader);
    $teller->setStoryContext($context);

    // make the story happen
    $return = $player->play($teller, $staticConfig);

    // write out any changed runtime config to disk
    $configLoader->saveRuntimeConfig($runtimeConfig);

    // all done
    return $return;
}

return main($argv);
